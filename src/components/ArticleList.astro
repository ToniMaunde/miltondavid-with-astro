---
import type { TArticle } from "../content/config";
import { articleDate, computeReadingTime } from "../util";

interface Props {
  articles: Array<{
    id: string;
    slug: string;
    body: string;
    collection: string;
    data: TArticle;
  }>;
}

function formatTopics(topics: Array<string>) {
  const topicsWithHashes = topics.map((topic) => `#${topic}`);
  return topicsWithHashes.join(" ");
}

const { articles } = Astro.props;
const orderedArticles = articles.sort((prev, next) => {
  const prevTime = new Date(prev.data.updatedAt).getTime();
  const nextTime = new Date(next.data.updatedAt).getTime();
  if (prevTime < nextTime) return 1;
  else if (prevTime > nextTime) return -1;

  return 0;
});
---

<ul class="flex flex-col gap-4">
  {
    orderedArticles.map((article) => (
      <li>
        <a
          href={`/articles/${article.slug}`}
          class="flex flex-col gap-2 bg-neutral-200 transition-shadow ease-in-out hover:md:ring hover:md:ring-supporting-gunmetal-300 p-4 rounded-lg"
        >
          <h3 class="font-overpass-mono text-supporting-gunmetal-300 dark:text-primary-300 text-2xl/8">
            {article.data.title}
          </h3>
          <p class="font-overpass-regular text-supporting-gunmetal-300 text-base/4 dark:text-neutral-300">
            {article.data.description}
          </p>
          <p class="text-supporting-gunmetal-100 dark:text-neutral-500 text-sm/4">
            ~{computeReadingTime(article.body)} min read{" "}
            <span>&nbsp‚¶Å&nbsp;</span>{" "}
            {articleDate(article.data.createdAt, article.data.updatedAt)}
          </p>
          <p class="text-supporting-gunmetal-300 dark:text-neutral-300 text-sm/4">
            {formatTopics(article.data.topics)}
          </p>
        </a>
      </li>
    ))
  }
</ul>
