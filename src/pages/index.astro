---
import { getCollection } from "astro:content";
import Layout from "../layouts/Layout.astro";
import { formatDate, truncateText } from "../util";
import type { TArticleEntry } from "../types";

const articlesAndDrafts = await getCollection("articles");

function sortArticles(articles: Array<TArticleEntry>) {
  return articles.sort((prev, next) => {
  const prevTime = new Date(prev.data.updatedAt).getTime();
  const nextTime = new Date(next.data.updatedAt).getTime();
  if (prevTime < nextTime) return 1;
  else if (prevTime > nextTime) return -1;

  return 0;
  })
}

const onlyArticles = articlesAndDrafts.filter((article) => article.data.isDraft === false);
const orderedArticles = sortArticles(onlyArticles);

const drafts = articlesAndDrafts.filter((article) => article.data.isDraft);
const orderedDrafts = sortArticles(drafts);

const SUMMARY_LENGTH = 140;
const pageDescription = "Milton David's personal website";

const projects: Array<{
  name: string;
  description: string;
  link: string;
  stack: Array<string>;
}> = [
  {
    name: "minhamola",
    link: "https://minhamola.com",
    description:
      "A web-based personal finance management application. Built with Vue.js and Express.js.",
    stack: ["Vue.js", "Express.js", "PostgreSQL"],
  },
  {
    name: "typed-formdata",
    link: "https://github.com/ToniMaunde/typed-formdata",
    description:
      "An experiment on parsing and validating the native formdata object based on a schema. Built with TypeScript and Zod.",
    stack: ["TypeScript", "Zod"],
  },
  {
    name: "react-svg-icon",
    link: "https://github.com/ToniMaunde/react-svg-component",
    description:
      "A tree-shakeable approach to rendering SVGs (in React.js). All without the use of a library or using the HTMLImageElement. Built with React.js and TypeScript.",
    stack: ["React.js", "TypeScript"],
  },
];
---

<Layout title="Home - Milton David" description={pageDescription}>
  <main class="region" data-region="content">
    <header data-page="home">
      <h1>Building handy tools for others and I</h1>
      <p>
        Iâ€™m a software engineer and a UI designer. I combine these specialties
        to create apps that are useful.
      </p>
      <p>
        Below are a few tools I created and articles I wrote on topics worth
        pondering.
      </p>
    </header>
    <section data-content-type="projects">
      <h2>Projects</h2>
      <ul role="list">
        {
          projects.map((project) => (
            <li>
              <a href={project.link} target="_blank" rel="noreferrer">
                <h3>{project.name}</h3>
              </a>
              <p>{project.description}</p>
              <ul data-content-type="technology-stack">
                {project.stack.map((technology) => (
                  <li>
                    <span>{technology}</span>
                  </li>
                ))}
              </ul>
            </li>
          ))
        }
      </ul>
    </section>
    <section data-content-type="articles">
      <h2>Articles</h2>
      <ul role="list">
        {
          orderedArticles.map((article) => (
            <li>
              <a href={`/articles/${article.slug}`}>
                <h3>{article.data.title}</h3>
              </a>
              <p>{truncateText(article.data.summary, SUMMARY_LENGTH)}</p>
              <time datetime={formatDate(article.data.updatedAt, "yyyy-MM-dd")}>
                {formatDate(article.data.updatedAt, "MMM dd yyyy")}
              </time>
            </li>
          ))
        }
      </ul>
    </section>
    <section data-content-type="article-drafts">
      <h2>Drafts</h2>
      {
        drafts.length > 0 ? (
          <ul role="list">
            {orderedDrafts.map((article) => (
              <li>
                <a href={`/articles/${article.slug}`}>
                  <h3>{article.data.title}</h3>
                </a>
                <p>{truncateText(article.data.summary, SUMMARY_LENGTH)}</p>
                <time
                  datetime={formatDate(article.data.updatedAt, "yyyy-MM-dd")}
                >
                  {formatDate(article.data.updatedAt, "MMM dd yyyy")}
                </time>
              </li>
            ))}
          </ul>
        ) : (
          <p>Oh no, I'm not writing enough.</p>
        )
      }
    </section>
  </main>
</Layout>
